Index: app/src/main/java/com/example/frontend/ui/home/HomeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.frontend.ui.home;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.os.Bundle;\r\nimport android.os.StrictMode;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.test.espresso.idling.CountingIdlingResource;\r\n\r\nimport com.example.frontend.MainActivity;\r\nimport com.example.frontend.R;\r\nimport com.example.frontend.ServerCommunicationAsync;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.squareup.picasso.Picasso;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.BufferedInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.URL;\r\nimport java.util.Objects;\r\n\r\nimport okhttp3.Call;\r\nimport okhttp3.Callback;\r\nimport okhttp3.Response;\r\n\r\npublic class HomeFragment extends Fragment implements View.OnClickListener {\r\n    private String userToken, userId;\r\n    private String TAG = \"HomeFragment\";\r\n    private static final String EMPTY_STRING = \"\";\r\n\r\n    private String icon_today,icon_tmr;\r\n    private String monthDesc_today,dayDesc_today,date_today;\r\n    private String monthDesc_tmr,dayDesc_tmr,date_tmr;\r\n    private String temp_min_today,temp_max_today,temp_min_tmr,temp_max_tmr;\r\n    TextView tv_date_today,tv_date_tmr,tv_temp_today,tv_temp_tmr;\r\n    ImageView iv_icon_today,iv_icon_tmr;\r\n\r\n    Button outfitButton,likeButton,dislikeButton;\r\n    RelativeLayout rl_outfit;\r\n    ImageView cloth1, cloth2, cloth3;\r\n    ConstraintLayout view_dislike;\r\n    TextView tv_undo;\r\n    ImageButton undoButton;\r\n\r\n    private String outfitId = EMPTY_STRING;\r\n    private String upperClothesId = EMPTY_STRING;\r\n    private String trousersId = EMPTY_STRING;\r\n    private String shoesId = EMPTY_STRING;\r\n\r\n    private JSONObject outfit_opinion = new JSONObject();\r\n    private boolean like = false;\r\n    private boolean dislike = false;\r\n    private boolean undoDislike = false;\r\n\r\n    static CountingIdlingResource idlingResource = new CountingIdlingResource(\"send_get_outfit_request\");\r\n    private String message = EMPTY_STRING;\r\n    private String warning = EMPTY_STRING;\r\n    private String success = EMPTY_STRING;\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             ViewGroup container, Bundle savedInstanceState) {\r\n\r\n        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();\r\n        StrictMode.setThreadPolicy(policy);\r\n        View root = inflater.inflate(R.layout.fragment_home, container, false);\r\n\r\n        tv_date_today = root.findViewById(R.id.tv_date_today);\r\n        tv_date_tmr = root.findViewById(R.id.tv_date_tmr);\r\n        tv_temp_today = root.findViewById(R.id.tv_temp_today);\r\n        tv_temp_tmr = root.findViewById(R.id.tv_temp_tmr);\r\n        iv_icon_today = root.findViewById(R.id.iv_icon_today);\r\n        iv_icon_tmr = root.findViewById(R.id.iv_icon_tmr);\r\n\r\n        outfitButton = root.findViewById(R.id.btn_outfit);\r\n        likeButton = root.findViewById(R.id.btn_like_outfit1);\r\n        dislikeButton = root.findViewById(R.id.btn_dislike_outfit1);\r\n        outfitButton.setOnClickListener(this);\r\n        likeButton.setOnClickListener(this);\r\n        dislikeButton.setOnClickListener(this);\r\n\r\n        view_dislike = root.findViewById(R.id.view_dislike);\r\n        view_dislike.setVisibility(View.GONE);\r\n        tv_undo =  root.findViewById(R.id.tv_undo);\r\n        undoButton =  root.findViewById(R.id.btn_undo);\r\n        tv_undo.setOnClickListener(this);\r\n        undoButton.setOnClickListener(this);\r\n\r\n        rl_outfit = root.findViewById(R.id.rl_outfit);\r\n        rl_outfit.setVisibility(View.GONE);\r\n        cloth1 = root.findViewById(R.id.iv_clothes1_outfit1);\r\n        cloth2 = root.findViewById(R.id.iv_clothes2_outfit1);\r\n        cloth3 = root.findViewById(R.id.iv_clothes3_outfit1);\r\n\r\n        //get User's data from MainActivity and display them on fragment\r\n        userToken = MainActivity.getUser().getUserToken();\r\n        userId = MainActivity.getUser().getUserId();\r\n        getWeatherData(userToken);\r\n\r\n        return root;\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        switch (view.getId()){\r\n            case R.id.btn_outfit:\r\n                idlingResource.increment();\r\n                outfitButton.setEnabled(false);\r\n                getOutfitData(userToken);\r\n\r\n\r\n                while ((outfitId.equals(EMPTY_STRING) || upperClothesId.equals(EMPTY_STRING) ||\r\n                        trousersId.equals(EMPTY_STRING) || shoesId.equals(EMPTY_STRING))\r\n                        && message.equals(EMPTY_STRING)) {\r\n                    Log.d(TAG, \"busy waiting for ids\");\r\n                }\r\n                //fail to generate an outfit\r\n                if(!message.equals(EMPTY_STRING)&&!warning.equals(EMPTY_STRING)&&success.equals((EMPTY_STRING))){\r\n                    Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();\r\n                    Toast.makeText(getContext(), warning, Toast.LENGTH_SHORT).show();\r\n                }\r\n                else {\r\n                    rl_outfit.setVisibility(View.VISIBLE);\r\n                    likeButton.setEnabled(true);\r\n                    dislikeButton.setEnabled(true);\r\n                    cloth1.setBackground(getClothesImage(userId, upperClothesId));\r\n                    cloth2.setBackground(getClothesImage(userId, trousersId));\r\n                    cloth3.setBackground(getClothesImage(userId, shoesId));\r\n                }\r\n                outfitButton.setEnabled(true);\r\n\r\n                break;\r\n\r\n            case R.id.btn_like_outfit1:\r\n                idlingResource.increment();\r\n                like = true;\r\n                //send response to server\r\n                try {\r\n                    outfit_opinion.put(\"opinion\", \"like\");\r\n                    sendOutfitOpinionToServer(outfit_opinion,userToken);\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                break;\r\n            case R.id.btn_dislike_outfit1:\r\n                idlingResource.increment();\r\n                dislike = true;\r\n                //send response to server\r\n                try {\r\n                    outfit_opinion.put(\"opinion\", \"dislike\");\r\n                    sendOutfitOpinionToServer(outfit_opinion,userToken);\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                break;\r\n\r\n            case R.id.btn_undo:\r\n            case R.id.tv_undo:\r\n                idlingResource.increment();\r\n                Log.d(TAG,\"clicked undo opinion\");\r\n                undoDislike = true;\r\n                //send response to server\r\n                try {\r\n                    outfit_opinion.put(\"opinion\", \"unknown\");\r\n                    sendOutfitOpinionToServer(outfit_opinion,userToken);\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                break;\r\n\r\n            default:\r\n        }\r\n    }\r\n\r\n    private void sendOutfitOpinionToServer(JSONObject outfit_opinion,String userToken) {\r\n        ServerCommunicationAsync serverCommunication = new ServerCommunicationAsync();\r\n        final String data = outfit_opinion.toString();\r\n        Log.d(TAG,\"prepared to sendOutfitOpinionToServer\");\r\n        Log.d(TAG,\"put request: \"+outfit_opinion);\r\n\r\n        serverCommunication.putWithAuthentication(\"http://closet-cpen321.westus.cloudapp.azure.com/api/outfits/\"+outfitId, data,userToken, new Callback() {\r\n            @Override\r\n            public void onFailure(@NotNull Call call, @NotNull IOException e) {\r\n                e.printStackTrace();\r\n                Log.d(TAG, \"Fail to send outfit opinion to server\");\r\n                Log.d(TAG, String.valueOf(e));\r\n                idlingResource.decrement();\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {\r\n\r\n                String responseStr = Objects.requireNonNull(response.body()).string();\r\n                Log.d(TAG, responseStr);\r\n\r\n                if (response.isSuccessful()) {\r\n                    if(like){\r\n                        like = !like;\r\n                        getActivity().runOnUiThread(new Runnable() {\r\n                            public void run() {\r\n                                Toast.makeText(getContext(), \"Your preference has been recorded\", Toast.LENGTH_SHORT).show();\r\n                                likeButton.setEnabled(false);\r\n                                dislikeButton.setEnabled(false);\r\n                            }\r\n                        });\r\n\r\n\r\n                    } else if(dislike){\r\n                        dislike = !dislike;\r\n                        getActivity().runOnUiThread(new Runnable() {\r\n                            public void run() {\r\n                                view_dislike.setVisibility(View.VISIBLE);\r\n                                likeButton.setEnabled(false);\r\n                                dislikeButton.setEnabled(false);\r\n                                undoButton.setEnabled(true);\r\n                                tv_undo.setEnabled(true);\r\n                            }\r\n                        });\r\n\r\n                    } else if (undoDislike){\r\n                        undoDislike = !undoDislike;\r\n                        Log.d(TAG,\"undo dislike\");\r\n                        //when finish undo dislike,jump back to main screen and let user to select again\r\n                        getActivity().runOnUiThread(new Runnable() {\r\n                            public void run() {\r\n                                view_dislike.setVisibility(View.GONE);\r\n                                likeButton.setEnabled(true);\r\n                                dislikeButton.setEnabled(true);\r\n                            }\r\n                        });\r\n\r\n                    }else {\r\n                        Log.d(TAG,\" Error: invalid user's outfit opinion type\");\r\n                    }\r\n                    idlingResource.decrement();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getWeatherData(String userToken) {\r\n        ServerCommunicationAsync serverCommunication = new ServerCommunicationAsync();\r\n        Log.d(TAG,\"prepared to sendUserDataToServer\");\r\n\r\n        serverCommunication.getWithAuthentication(\"http://closet-cpen321.westus.cloudapp.azure.com/api/weather/\",userToken, new Callback() {\r\n            @Override\r\n            public void onFailure(@NotNull Call call, @NotNull IOException e) {\r\n                e.printStackTrace();\r\n                Log.d(TAG,\"Fail to send weather request to server\");\r\n                Log.d(TAG, String.valueOf(e));\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {\r\n                String responseStr = Objects.requireNonNull(response.body()).string();\r\n                if (response.isSuccessful()) {\r\n                    Log.d(TAG,\"weather request is successful\"+responseStr);\r\n                    JSONObject responseJson;\r\n                    try {\r\n                        //retrieve weather data from OpenWeather's response and display on UI\r\n                        responseJson = new JSONObject(responseStr);\r\n                        extractResponseWeatherData(responseJson);\r\n                        updateWeatherOnUI();\r\n                    } catch (JSONException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                } else {\r\n                    // Request not successful\r\n                    Log.d(TAG,\"weather request is unsuccessful\"+responseStr);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void updateWeatherOnUI() {\r\n        requireActivity().runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                //update weather and time data on the UI\r\n                tv_date_today.setText(monthDesc_today+\" \"+date_today+\" (\"+dayDesc_today+\")\");\r\n                tv_temp_today.setText(\"Max \"+temp_max_today+\"°C \"+\"Min \"+temp_min_today+\"°C\");\r\n                tv_date_tmr.setText(monthDesc_tmr+\" \"+date_tmr +\" (\"+dayDesc_tmr+\")\");\r\n                tv_temp_tmr.setText(\"Max \"+temp_max_tmr+\"°C \"+\"Min \"+temp_min_tmr+\"°C\");\r\n                Picasso.get().load(\"http://openweathermap.org/img/wn/\"+icon_today+\"@2x.png\").resize(50, 50).centerCrop().into(iv_icon_today);\r\n                Picasso.get().load(\"http://openweathermap.org/img/wn/\"+icon_tmr+\"@2x.png\").resize(50, 50).centerCrop().into(iv_icon_tmr);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void extractResponseWeatherData(JSONObject responseJson) {\r\n        JSONObject today,tomorrow, time_today, time_tmr,temp_today,temp_tmr;\r\n        JSONArray weather_today,weather_tmr;\r\n        try {\r\n            today = responseJson.getJSONObject(\"today\");\r\n            tomorrow = responseJson.getJSONObject(\"tomorrow\");\r\n            weather_today = today.getJSONArray(\"weather\");\r\n            weather_tmr = tomorrow.getJSONArray(\"weather\");\r\n            for(int i = 0; i < weather_today.length();i++){\r\n                icon_today =weather_today.getJSONObject(i).getString(\"icon\");\r\n                icon_tmr =weather_tmr.getJSONObject(i).getString(\"icon\");\r\n            }\r\n            temp_today = today.getJSONObject(\"temp\");\r\n            temp_min_today = temp_today.getString(\"min\");\r\n            temp_max_today = temp_today.getString(\"max\");\r\n            temp_tmr = tomorrow.getJSONObject(\"temp\");\r\n            temp_min_tmr = temp_tmr.getString(\"min\");\r\n            temp_max_tmr = temp_tmr.getString(\"max\");\r\n\r\n            //retrieve time data from OpenWeather's response\r\n            time_today = today.getJSONObject(\"time\");\r\n            time_tmr = tomorrow.getJSONObject(\"time\");\r\n            monthDesc_today = time_today.getJSONObject(\"month\").getString(\"monthDesc\");\r\n            dayDesc_today = time_today.getJSONObject(\"day\").getString(\"dayDesc\");\r\n            date_today = time_today.getString(\"date\");\r\n            monthDesc_tmr = time_tmr.getJSONObject(\"month\").getString(\"monthDesc\");\r\n            dayDesc_tmr = time_tmr.getJSONObject(\"day\").getString(\"dayDesc\");\r\n            date_tmr = time_tmr.getString(\"date\");\r\n        } catch (JSONException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    public void getOutfitData(String userToken) {\r\n        ServerCommunicationAsync serverCommunication = new ServerCommunicationAsync();\r\n        Log.d(TAG,\"prepared to sendUserDataToServer\");\r\n\r\n        serverCommunication.getWithAuthentication(\"http://closet-cpen321.westus.cloudapp.azure.com/api/outfits/one\",userToken, new Callback() {\r\n            @Override\r\n            public void onFailure(@NotNull Call call, @NotNull IOException e) {\r\n                e.printStackTrace();\r\n                Log.d(TAG,\"Fail to send request to server\");\r\n                Log.d(TAG, String.valueOf(e));\r\n                idlingResource.decrement();\r\n            }\r\n\r\n            @Override\r\n            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {\r\n\r\n                String responseStr = Objects.requireNonNull(response.body()).string();\r\n                if (response.isSuccessful()) {\r\n\r\n                    Log.d(TAG,\"Outfit request is successful\"+responseStr);\r\n                    JSONObject responseJson;\r\n                    try {\r\n                        //retrieve outfit data from server's response\r\n                        responseJson = new JSONObject(responseStr);\r\n                        extractResponseOutfitData(responseJson);\r\n\r\n                    } catch (JSONException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                } else {\r\n                    JSONObject responseJson;\r\n                    try {\r\n                        //retrieve outfit data from server's response\r\n                        responseJson = new JSONObject(responseStr);\r\n                        // Request not successful\r\n                        if(responseJson.has(\"message\")){\r\n                            message = responseJson.getString(\"message\");\r\n                        }\r\n                        if(responseJson.has(\"warning\")){\r\n                            warning = responseJson.getString(\"warning\");\r\n                        }\r\n                    } catch (JSONException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    Log.d(TAG,\"Outfit request is unsuccessful: \"+message+warning);\r\n\r\n                }\r\n                idlingResource.decrement();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void extractResponseOutfitData(JSONObject responseJson) throws JSONException{\r\n        JSONObject outfitJson = responseJson.getJSONObject(\"outfit\");\r\n        JSONObject upperClothesJSON = outfitJson.getJSONObject(\"chosenUpperClothes\");\r\n        JSONObject trousersJSON = outfitJson.getJSONObject(\"chosenTrousers\");\r\n        JSONObject shoesJSON = outfitJson.getJSONObject(\"chosenShoes\");\r\n\r\n        try {\r\n            if (outfitJson.has(\"_id\")) {\r\n                outfitId = outfitJson.getString(\"_id\");\r\n            }\r\n            if (upperClothesJSON.has(\"id\")){\r\n                upperClothesId = upperClothesJSON.getString(\"id\");\r\n            }\r\n            if (trousersJSON.has(\"id\")){\r\n                trousersId = trousersJSON.getString(\"id\");\r\n            }\r\n            if (shoesJSON.has(\"id\")){\r\n                shoesId = shoesJSON.getString(\"id\");\r\n            }\r\n            if(responseJson.has(\"message\")){\r\n                message = responseJson.getString(\"message\");\r\n            }\r\n            if(responseJson.has(\"success\")){\r\n                success = responseJson.getString(\"success\");\r\n            }\r\n        } catch (JSONException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private Drawable getClothesImage(String userId, String clothId) {\r\n        URL url;\r\n        InputStream stream;\r\n        BufferedInputStream buffer;\r\n\r\n        try {\r\n            url = new URL(\"http://closet-cpen321.westus.cloudapp.azure.com/UserClothingImages/\" + userId + \"/\" + clothId + \".png\");\r\n            stream = url.openStream();\r\n            buffer = new BufferedInputStream(stream);\r\n            Bitmap bitmap = BitmapFactory.decodeStream(buffer);\r\n            if (stream != null) {\r\n                stream.close();\r\n            }\r\n            buffer.close();\r\n\r\n            return new BitmapDrawable(bitmap);\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    public static CountingIdlingResource getRegisterIdlingResourceInTest() {\r\n        return idlingResource;\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/frontend/ui/home/HomeFragment.java	(revision 649a4ddf2d7ba4e4d83b1b428bb1ff444d24ef94)
+++ app/src/main/java/com/example/frontend/ui/home/HomeFragment.java	(date 1605674781727)
@@ -73,9 +73,6 @@
     private boolean undoDislike = false;
 
     static CountingIdlingResource idlingResource = new CountingIdlingResource("send_get_outfit_request");
-    private String message = EMPTY_STRING;
-    private String warning = EMPTY_STRING;
-    private String success = EMPTY_STRING;
 
     public View onCreateView(@NonNull LayoutInflater inflater,
                              ViewGroup container, Bundle savedInstanceState) {
@@ -116,6 +113,8 @@
         userId = MainActivity.getUser().getUserId();
         getWeatherData(userToken);
 
+
+
         return root;
     }
 
@@ -128,41 +127,32 @@
                 getOutfitData(userToken);
 
 
-                while ((outfitId.equals(EMPTY_STRING) || upperClothesId.equals(EMPTY_STRING) ||
-                        trousersId.equals(EMPTY_STRING) || shoesId.equals(EMPTY_STRING))
-                        && message.equals(EMPTY_STRING)) {
+                while (outfitId.equals(EMPTY_STRING) || upperClothesId.equals(EMPTY_STRING) || trousersId.equals(EMPTY_STRING) || shoesId.equals(EMPTY_STRING)) {
                     Log.d(TAG, "busy waiting for ids");
                 }
-                //fail to generate an outfit
-                if(!message.equals(EMPTY_STRING)&&!warning.equals(EMPTY_STRING)&&success.equals((EMPTY_STRING))){
-                    Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();
-                    Toast.makeText(getContext(), warning, Toast.LENGTH_SHORT).show();
-                }
-                else {
-                    rl_outfit.setVisibility(View.VISIBLE);
-                    likeButton.setEnabled(true);
-                    dislikeButton.setEnabled(true);
-                    cloth1.setBackground(getClothesImage(userId, upperClothesId));
-                    cloth2.setBackground(getClothesImage(userId, trousersId));
-                    cloth3.setBackground(getClothesImage(userId, shoesId));
-                }
-                outfitButton.setEnabled(true);
+                rl_outfit.setVisibility(View.VISIBLE);
+                likeButton.setEnabled(true);
+                dislikeButton.setEnabled(true);
+                outfitButton.setEnabled(true);
+                cloth1.setBackground(getClothesImage(userId, upperClothesId));
+                cloth2.setBackground(getClothesImage(userId, trousersId));
+                cloth3.setBackground(getClothesImage(userId, shoesId));
 
                 break;
 
             case R.id.btn_like_outfit1:
-                idlingResource.increment();
                 like = true;
                 //send response to server
+
                 try {
                     outfit_opinion.put("opinion", "like");
                     sendOutfitOpinionToServer(outfit_opinion,userToken);
                 } catch (JSONException e) {
                     e.printStackTrace();
                 }
+
                 break;
             case R.id.btn_dislike_outfit1:
-                idlingResource.increment();
                 dislike = true;
                 //send response to server
                 try {
@@ -171,11 +161,12 @@
                 } catch (JSONException e) {
                     e.printStackTrace();
                 }
+
+
                 break;
 
             case R.id.btn_undo:
             case R.id.tv_undo:
-                idlingResource.increment();
                 Log.d(TAG,"clicked undo opinion");
                 undoDislike = true;
                 //send response to server
@@ -185,6 +176,7 @@
                 } catch (JSONException e) {
                     e.printStackTrace();
                 }
+
                 break;
 
             default:
@@ -203,7 +195,6 @@
                 e.printStackTrace();
                 Log.d(TAG, "Fail to send outfit opinion to server");
                 Log.d(TAG, String.valueOf(e));
-                idlingResource.decrement();
             }
 
             @Override
@@ -251,7 +242,7 @@
                     }else {
                         Log.d(TAG," Error: invalid user's outfit opinion type");
                     }
-                    idlingResource.decrement();
+
                 }
             }
         });
@@ -261,7 +252,7 @@
         ServerCommunicationAsync serverCommunication = new ServerCommunicationAsync();
         Log.d(TAG,"prepared to sendUserDataToServer");
 
-        serverCommunication.getWithAuthentication("http://closet-cpen321.westus.cloudapp.azure.com/api/weather/",userToken, new Callback() {
+        serverCommunication.getWithAuthentication("http://closet-cpen321.westus.cloudapp.azure.com/api/weather/vancouver",userToken, new Callback() {
             @Override
             public void onFailure(@NotNull Call call, @NotNull IOException e) {
                 e.printStackTrace();
@@ -371,22 +362,8 @@
                     }
 
                 } else {
-                    JSONObject responseJson;
-                    try {
-                        //retrieve outfit data from server's response
-                        responseJson = new JSONObject(responseStr);
-                        // Request not successful
-                        if(responseJson.has("message")){
-                            message = responseJson.getString("message");
-                        }
-                        if(responseJson.has("warning")){
-                            warning = responseJson.getString("warning");
-                        }
-                    } catch (JSONException e) {
-                        e.printStackTrace();
-                    }
-                    Log.d(TAG,"Outfit request is unsuccessful: "+message+warning);
-
+                    // Request not successful
+                    Log.d(TAG,"Outfit request is unsuccessful: "+responseStr);
                 }
                 idlingResource.decrement();
             }
@@ -412,12 +389,7 @@
             if (shoesJSON.has("id")){
                 shoesId = shoesJSON.getString("id");
             }
-            if(responseJson.has("message")){
-                message = responseJson.getString("message");
-            }
-            if(responseJson.has("success")){
-                success = responseJson.getString("success");
-            }
+
         } catch (JSONException e) {
             e.printStackTrace();
         }
